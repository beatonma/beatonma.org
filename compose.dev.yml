name: bma_dev

volumes:
  postgres:
  generated:

x-common: &common
  env_file: "./.env.dev"
  restart: "unless-stopped"
  tty: true

x-health: &health
  interval: 30s
  timeout: 2s
  start_period: 20s

services:
  db:
    <<: *common
    image: postgres:15-alpine
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready
      <<: *health

  db_admin:
    <<: *common
    image: dpage/pgadmin4
    ports:
      - "8081:80"

  django: &django
    <<: *common
    build:
      dockerfile: ./docker/Dockerfile.dev
      target: django
      context: .
    healthcheck:
      test: curl --head --fail http://localhost:8000/api/ping/ || exit 1
      <<: *health
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8000"
    volumes:
      - generated:/generated:ro
      - ./beatonma-django:/django:ro
      - /var/www/static:/var/www/static
      - /var/www/media:/var/www/media

  django_manage:
    <<: *django
    container_name: dev-django_manage
    profiles:
      - "manage"
    ports: []
    volumes:
      - generated:/generated:ro
      - ./beatonma-django:/django:rw
      - /var/www/static:/var/www/static
      - /var/www/media:/var/www/media
    healthcheck:
      test: [ "NONE" ]
    entrypoint: [ "sh" ]

  next:
    <<: *common
    container_name: dev-next
    build:
      dockerfile: ./docker/Dockerfile.dev
      target: frontend
      context: .
    depends_on:
      django:
          condition: service_healthy
    healthcheck:
      test: curl --head --fail http://localhost:3000/health-check || exit 1
      <<: *health
    ports:
      - "3001:3000"
    command: npm run dev
    environment:
      API_BASE_URL: http://django:8000
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./frontend/package.json

  nginx:
    <<: *common
    build:
      context: .
      target: nginx
      dockerfile: ./docker/Dockerfile.dev
    depends_on:
      django:
          condition: service_healthy
      next:
          condition: service_healthy
    healthcheck:
      test: curl --head --fail http://localhost/health-check/ || exit 1
      <<: *health
    volumes:
      - /var/www/static:/var/www/static
      - /var/www/media:/var/www/media
    ports:
      - "80:80"

  celery:
    <<: *common
    build:
      context: .
      target: celery
      dockerfile: ./docker/Dockerfile.dev
    volumes:
      - ./beatonma-django:/django:ro
    container_name: dev-celery
    depends_on:
      redis:
        condition: service_healthy

  redis:
    <<: *common
    image: redis:7-alpine
    container_name: dev-redis
    healthcheck:
      test: redis-cli ping
      <<: *health
