#!/usr/bin/env bash

usage="$(basename "$0")
  production ...
  dev  ...
  test [...]

  pull                 Update repository from remote.
  openapi [port=80]    Update API in frontend from server running on given port.
"

# cd into location of script to ensure relative paths resolve correctly.
cd "$(dirname "$0")" || exit 1

# Runtime variables
context="$1"
shift


log() {
  echo "$*" >"$(tty)"
}

run_command() {
  log "COMMAND: '$*'"
  "$@"
  exit_code=$?
  if [ "$exit_code" -ne 0 ]; then
    log "Command failed with code $exit_code:"
    log "  '$*'"
    exit "$exit_code"
  fi
}

case "$context" in
  "pull")
    run_command git pull --recurse-submodules
    exit 0
    ;;

  "openapi")
    run_command npx openapi-typescript "http://localhost:${1:-80}/api/openapi.json" -o frontend/src/api/api.d.ts
    exit 0
    ;;

  "production")
    source "./tools/bma/production.sh"
    ;;
  "dev")
    source "./tools/bma/dev.sh"
    ;;
  "test")
    source "./tools/bma/test.sh"
    ;;
esac

action="$1"
# Common actions
case "$action" in
  "up" | "down" | "restart")
    # Common docker commands
    docker_compose "$@"
    exit 0
    ;;
  "build")
    # Docker build
    shift
    docker_compose_build "$@"
    exit 0
    ;;
  "--")
    # Arbitrary docker command
    shift
    docker_compose "$@"
    exit 0
    ;;
esac

# Context-specific actions, implemented in each context script
if type run_action >/dev/null 2>&1; then run_action "$@"; fi

log "$usage"
