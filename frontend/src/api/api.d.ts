/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/posts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Post Feed */
        get: operations["main_api_posts_post_feed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Post */
        get: operations["main_api_posts_post"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/apps/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** App */
        get: operations["main_api_posts_app"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/changelog/{slug}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Changelog */
        get: operations["main_api_posts_changelog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/about/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** About */
        get: operations["main_api_posts_about"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ping/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Ping */
        get: operations["main_api_status_ping"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /** Ping */
        head: operations["main_api_status_ping"];
        patch?: never;
        trace?: never;
    };
    "/api/whoami/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Whoami */
        get: operations["main_api_status_whoami"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/redirect/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check Redirect */
        get: operations["main_api_status_check_redirect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/state/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Global State */
        get: operations["main_api_global_state_get_global_state"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contact/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Mail */
        post: operations["contact_api_send_mail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/webmentions_tester/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Temporary Webmentions */
        get: operations["webmentions_tester_api_get_temporary_webmentions"];
        put?: never;
        /** Post Webmention */
        post: operations["webmentions_tester_api_post_webmention"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/github/recent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Github Events */
        get: operations["github_api_get_github_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Input */
        Input: {
            /**
             * Limit
             * @default 24
             */
            limit: number;
            /**
             * Offset
             * @default 0
             */
            offset: number;
        };
        /** File */
        File: {
            url: components["schemas"]["Url"];
            thumbnail_url?: components["schemas"]["Url"];
            type: components["schemas"]["MediaType"];
            /** Name */
            name?: string | null;
            /** Description */
            description: string | null;
            fit: components["schemas"]["ImageFit"] | null;
        };
        /**
         * ImageFit
         * @enum {string}
         */
        ImageFit: "cover" | "contain";
        /**
         * MediaType
         * @enum {string}
         */
        MediaType: "audio" | "video" | "image" | "text" | "unknown";
        /** PagedPostPreview */
        PagedPostPreview: {
            /** Items */
            items: components["schemas"]["PostPreview"][];
            /** Count */
            count: number;
            /** Page Size */
            page_size: number;
            /** Previous */
            previous: number | null;
            /** Next */
            next: number | null;
        };
        /** PostPreview */
        PostPreview: {
            post_type: components["schemas"]["PostType"];
            /** Title */
            title: string | null;
            /** Url */
            url: string;
            /** Is Published */
            is_published: boolean;
            /**
             * Published At
             * Format: date-time
             */
            published_at: string;
            theme?: components["schemas"]["Theme"] | null;
            /** Hero Embedded Url */
            hero_embedded_url: string | null;
            hero_image: components["schemas"]["File"] | null;
            /** Content Html */
            content_html: string | null;
            /** Content Script */
            content_script: string | null;
            /** Files */
            files: components["schemas"]["File"][];
            /** Is Preview */
            is_preview: boolean;
        };
        /** @enum {string} */
        PostType: "post" | "app" | "changelog";
        /** Theme */
        Theme: {
            /** Muted */
            muted?: string | null;
            /** Vibrant */
            vibrant?: string | null;
        };
        Url: string;
        /** HCard */
        HCard: {
            /** Name */
            name: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Homepage */
            homepage: string | null;
        };
        /**
         * IncomingMentionType
         * @description Properties that describe the context of the incoming webmention.
         *
         *     See: https://microformats.org/wiki/h-entry
         * @enum {string}
         */
        IncomingMentionType: "u-bookmark-of" | "u-like-of" | "u-listen-of" | "u-in-reply-to" | "u-repost-of" | "u-translation-of" | "u-watch-of";
        /** Link */
        Link: {
            /** Url */
            url: string;
            /** Description */
            description?: string | null;
            icon?: components["schemas"]["Url"] | null;
        };
        /** Mention */
        Mention: {
            /** Source Url */
            source_url: string;
            hcard: components["schemas"]["HCard"] | null;
            /** Quote */
            quote: string | null;
            type?: components["schemas"]["IncomingMentionType"] | null;
            /**
             * Date
             * Format: date-time
             */
            date: string;
        };
        /** PostDetail */
        PostDetail: {
            /**
             * Post Type
             * @default post
             * @constant
             */
            post_type: "post";
            /** Title */
            title: string | null;
            /** Url */
            url: string;
            /** Is Published */
            is_published: boolean;
            /**
             * Published At
             * Format: date-time
             */
            published_at: string;
            theme?: components["schemas"]["Theme"] | null;
            /** Hero Embedded Url */
            hero_embedded_url: string | null;
            hero_image: components["schemas"]["File"] | null;
            /** Content Html */
            content_html: string | null;
            /** Content Script */
            content_script: string | null;
            /** Files */
            files: components["schemas"]["File"][];
            /** Subtitle */
            subtitle?: string | null;
            /** Hero Html */
            hero_html: string | null;
            /** Links */
            links: components["schemas"]["Link"][];
            /** Tags */
            tags: components["schemas"]["Tag"][];
            /** Mentions */
            mentions: components["schemas"]["Mention"][];
        };
        /** Tag */
        Tag: {
            /** Name */
            name: string;
        };
        /** AppDetail */
        AppDetail: {
            /**
             * Post Type
             * @default app
             * @constant
             */
            post_type: "app";
            /** Title */
            title: string | null;
            /** Url */
            url: string;
            /** Is Published */
            is_published: boolean;
            /**
             * Published At
             * Format: date-time
             */
            published_at: string;
            theme?: components["schemas"]["Theme"] | null;
            /** Hero Embedded Url */
            hero_embedded_url: string | null;
            hero_image: components["schemas"]["File"] | null;
            /** Content Html */
            content_html: string | null;
            /** Content Script */
            content_script: string | null;
            /** Files */
            files: components["schemas"]["File"][];
            /** Subtitle */
            subtitle?: string | null;
            /** Hero Html */
            hero_html: string | null;
            /** Links */
            links: components["schemas"]["Link"][];
            /** Tags */
            tags: components["schemas"]["Tag"][];
            /** Mentions */
            mentions: components["schemas"]["Mention"][];
            /** Changelog */
            changelog: components["schemas"]["ChangelogDetail"][];
            icon: components["schemas"]["File"] | null;
            /** Script */
            script?: string | null;
            /** Script Html */
            script_html: string | null;
            /** Is Widget */
            is_widget: boolean;
        };
        /** AppPreview */
        AppPreview: {
            /**
             * Post Type
             * @default app
             * @constant
             */
            post_type: "app";
            /** Title */
            title: string | null;
            /** Url */
            url: string;
            /** Is Published */
            is_published: boolean;
            /**
             * Published At
             * Format: date-time
             */
            published_at: string;
            theme?: components["schemas"]["Theme"] | null;
            /** Hero Embedded Url */
            hero_embedded_url: string | null;
            hero_image: components["schemas"]["File"] | null;
            /** Content Html */
            content_html: string | null;
            /** Content Script */
            content_script: string | null;
            /** Files */
            files: components["schemas"]["File"][];
            /** Is Preview */
            is_preview: boolean;
            icon?: components["schemas"]["File"] | null;
        };
        /** ChangelogDetail */
        ChangelogDetail: {
            /**
             * Post Type
             * @default changelog
             * @constant
             */
            post_type: "changelog";
            /** Title */
            title: string | null;
            /** Url */
            url: string;
            /** Is Published */
            is_published: boolean;
            /**
             * Published At
             * Format: date-time
             */
            published_at: string;
            theme?: components["schemas"]["Theme"] | null;
            /** Hero Embedded Url */
            hero_embedded_url: string | null;
            hero_image: components["schemas"]["File"] | null;
            /** Content Html */
            content_html: string | null;
            /** Content Script */
            content_script: string | null;
            /** Files */
            files: components["schemas"]["File"][];
            /** Subtitle */
            subtitle?: string | null;
            /** Hero Html */
            hero_html: string | null;
            /** Links */
            links: components["schemas"]["Link"][];
            /** Tags */
            tags: components["schemas"]["Tag"][];
            /** Mentions */
            mentions: components["schemas"]["Mention"][];
            app: components["schemas"]["AppPreview"];
            /** Version */
            version: string;
        };
        /** WhoAmiISchema */
        WhoAmiISchema: {
            /**
             * Ip
             * Format: ipvanyaddress
             */
            ip: string;
            /** Device */
            device: string;
            /** Os */
            os: string;
            /** Browser */
            browser: string;
        };
        /** RedirectSchema */
        RedirectSchema: {
            /** Redirect */
            redirect: string;
        };
        /** GlobalState */
        GlobalState: {
            /** Motd */
            motd: string | null;
            /** Hcard */
            hcard: string | null;
        };
        /** ContactForm */
        ContactForm: {
            /** Name */
            name: string;
            /** Contact Info */
            contact_info: string;
            /** Message */
            message: string;
            /** Recaptcha Token */
            recaptcha_token: string;
        };
        /** TempMention */
        TempMention: {
            /** Url */
            url: string;
            /**
             * Submitted At
             * Format: date-time
             */
            submitted_at: string;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
            status: components["schemas"]["TempMentionStatus"] | null;
        };
        /** TempMentionStatus */
        TempMentionStatus: {
            /** Successful */
            successful: boolean;
            /** Status Code */
            status_code: number;
            /** Message */
            message: string;
            /** Source Url */
            source_url: string;
            /** Target Url */
            target_url: string;
            /** Endpoint */
            endpoint: string;
        };
        /** WebmentionTesterSchema */
        WebmentionTesterSchema: {
            /** Temporary Outgoing Mentions */
            temporary_outgoing_mentions: components["schemas"]["TempMention"][];
            /** Mentions */
            mentions: components["schemas"]["Mention"][];
        };
        /** GithubCommit */
        GithubCommit: {
            /** Sha */
            sha: string;
            /** Message */
            message: string;
            /** Url */
            url: string;
        };
        /** GithubCreateEventPayload */
        GithubCreateEventPayload: {
            /**
             * Ref Type
             * @enum {string}
             */
            ref_type: "branch" | "tag" | "repository";
            /** Ref */
            ref: string;
        };
        /** GithubIssueEventPayload */
        GithubIssueEventPayload: {
            /** Number */
            number: number;
            /** Url */
            url: string;
            /**
             * Closed At
             * Format: date-time
             */
            closed_at: string;
        };
        /** GithubPrivateEvent */
        GithubPrivateEvent: {
            /**
             * Type
             * @constant
             */
            type: "PrivateEventSummary";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Event Count */
            event_count: number;
            /** Change Count */
            change_count: number;
            /** Repository Count */
            repository_count: number;
        };
        /** GithubPublicCreateEvent */
        GithubPublicCreateEvent: {
            /**
             * Type
             * @constant
             */
            type: "CreateEvent";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Id */
            id: number;
            repository: components["schemas"]["GithubRepositorySchema"];
            payload: components["schemas"]["GithubCreateEventPayload"];
        };
        /** GithubPublicIssueEvent */
        GithubPublicIssueEvent: {
            /**
             * Type
             * @constant
             */
            type: "IssuesEvent";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Id */
            id: number;
            repository: components["schemas"]["GithubRepositorySchema"];
            payload: components["schemas"]["GithubIssueEventPayload"];
        };
        /** GithubPublicPullRequestEvent */
        GithubPublicPullRequestEvent: {
            /**
             * Type
             * @constant
             */
            type: "PullRequestEvent";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Id */
            id: number;
            repository: components["schemas"]["GithubRepositorySchema"];
            payload: components["schemas"]["GithubPullRequestPayload"];
        };
        /** GithubPublicPushEvent */
        GithubPublicPushEvent: {
            /**
             * Type
             * @constant
             */
            type: "PushEvent";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Id */
            id: number;
            repository: components["schemas"]["GithubRepositorySchema"];
            /** Payload */
            payload: components["schemas"]["GithubCommit"][];
        };
        /** GithubPublicReleaseEvent */
        GithubPublicReleaseEvent: {
            /**
             * Type
             * @constant
             */
            type: "ReleaseEvent";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Id */
            id: number;
            repository: components["schemas"]["GithubRepositorySchema"];
            payload: components["schemas"]["GithubReleasePayload"];
        };
        /** GithubPublicWikiEvent */
        GithubPublicWikiEvent: {
            /**
             * Type
             * @constant
             */
            type: "GollumEvent";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Id */
            id: number;
            repository: components["schemas"]["GithubRepositorySchema"];
            /** Payload */
            payload: components["schemas"]["GithubWikiEdit"][];
        };
        /** GithubPullRequestPayload */
        GithubPullRequestPayload: {
            /** Number */
            number: number;
            /** Url */
            url: string;
            /**
             * Merged At
             * Format: date-time
             */
            merged_at: string;
            /** Additions Count */
            additions_count: number;
            /** Deletions Count */
            deletions_count: number;
            /** Changed Files Count */
            changed_files_count: number;
        };
        /** GithubRecentEvents */
        GithubRecentEvents: {
            /** Events */
            events: (components["schemas"]["GithubPrivateEvent"] | components["schemas"]["GithubPublicCreateEvent"] | components["schemas"]["GithubPublicIssueEvent"] | components["schemas"]["GithubPublicPullRequestEvent"] | components["schemas"]["GithubPublicReleaseEvent"] | components["schemas"]["GithubPublicPushEvent"] | components["schemas"]["GithubPublicWikiEvent"])[];
        };
        /** GithubReleasePayload */
        GithubReleasePayload: {
            /** Name */
            name: string;
            /** Url */
            url: string;
            /** Description */
            description: string;
            /**
             * Published At
             * Format: date-time
             */
            published_at: string;
        };
        /** GithubRepositorySchema */
        GithubRepositorySchema: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Url */
            url: string;
            /** License */
            license: string | null;
            /** Description */
            description: string | null;
        };
        /** GithubWikiEdit */
        GithubWikiEdit: {
            /** Name */
            name: string;
            /** Url */
            url: string;
            /**
             * Action
             * @enum {string}
             */
            action: "created" | "edited";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    main_api_posts_post_feed: {
        parameters: {
            query?: {
                query?: string;
                tag?: string;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedPostPreview"];
                };
            };
        };
    };
    main_api_posts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostDetail"];
                };
            };
        };
    };
    main_api_posts_app: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppDetail"];
                };
            };
        };
    };
    main_api_posts_changelog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangelogDetail"];
                };
            };
        };
    };
    main_api_posts_about: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostDetail"];
                };
            };
        };
    };
    main_api_status_ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    main_api_status_ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    main_api_status_whoami: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WhoAmiISchema"];
                };
            };
        };
    };
    main_api_status_check_redirect: {
        parameters: {
            query: {
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RedirectSchema"];
                };
            };
        };
    };
    main_api_global_state_get_global_state: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GlobalState"];
                };
            };
        };
    };
    contact_api_send_mail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactForm"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    webmentions_tester_api_get_temporary_webmentions: {
        parameters: {
            query: {
                url_path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebmentionTesterSchema"];
                };
            };
        };
    };
    webmentions_tester_api_post_webmention: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** Url */
                    url: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    github_api_get_github_events: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GithubRecentEvents"];
                };
            };
        };
    };
}
