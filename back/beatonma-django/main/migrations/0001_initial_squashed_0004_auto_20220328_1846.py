# Generated by Django 3.2.4 on 2022-03-28 19:41

import colorfield.fields
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.db import migrations, models

import main.models.app
import main.models.mixins.styleable_svg
import main.storage
import main.util


class Migration(migrations.Migration):

    replaces = [
        ("main", "0001_initial"),
        ("main", "0002_auto_20210129_1451"),
        ("main", "0003_auto_20220112_1606"),
        ("main", "0004_auto_20220328_1846"),
    ]

    dependencies = [
        ("taggit", "0003_taggeditem_add_unique_index"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="AppType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "icon_file",
                    models.FileField(
                        blank=True,
                        help_text="SVG icon",
                        upload_to="icon/",
                        validators=[main.models.mixins.styleable_svg.validate_svg],
                    ),
                ),
                (
                    "icon_svg",
                    models.CharField(
                        blank=True, help_text="<svg> element", max_length=8192
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g. Android, web, server...", max_length=50
                    ),
                ),
                ("tooltip", models.CharField(max_length=50)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g. Java, Python, CSS...",
                        max_length=50,
                        unique=True,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A name for this project", max_length=255
                    ),
                ),
                (
                    "project_id",
                    models.CharField(
                        help_text="A unique identifier for this project",
                        max_length=255,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="App",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("allow_incoming_webmentions", models.BooleanField(default=True)),
                ("allow_outgoing_webmentions", models.BooleanField(default=False)),
                (
                    "primary_color",
                    colorfield.fields.ColorField(blank=True, default="", max_length=18),
                ),
                (
                    "accent_color",
                    colorfield.fields.ColorField(blank=True, default="", max_length=18),
                ),
                (
                    "foreground_color",
                    models.CharField(
                        choices=[("light", "light"), ("dark", "dark")],
                        default="light",
                        help_text="CSS class for content that appears on top of primary color",
                        max_length=10,
                    ),
                ),
                (
                    "accent_foreground_color",
                    models.CharField(
                        choices=[("light", "light"), ("dark", "dark")],
                        default="dark",
                        help_text="CSS class for content that appears on top of accent color",
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=140)),
                (
                    "app_id",
                    models.CharField(
                        help_text="Application ID", max_length=255, unique=True
                    ),
                ),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("tagline", models.CharField(blank=True, max_length=140)),
                ("icon", models.FileField(blank=True, upload_to="icon/app/")),
                (
                    "links",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated list of URLs",
                        max_length=1024,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("dev", "In development"),
                            ("test", "Public testing"),
                            ("public", "Published"),
                            ("deprecated", "Deprecated"),
                        ],
                        default="dev",
                        max_length=16,
                    ),
                ),
                ("date_published", models.DateField(blank=True, null=True)),
                (
                    "app_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.apptype",
                    ),
                ),
                (
                    "code_languages",
                    models.ManyToManyField(blank=True, to="main.Language"),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.project",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "ordering": ["app_type"],
            },
        ),
        migrations.CreateModel(
            name="AppImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.FileField(upload_to="")),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Image content description",
                        max_length=140,
                        null=True,
                    ),
                ),
                (
                    "for_app",
                    models.ForeignKey(
                        help_text="Which app is this image for?",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="main.app",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Host",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "icon_file",
                    models.FileField(
                        blank=True,
                        help_text="SVG icon",
                        upload_to="icon/",
                        validators=[main.models.mixins.styleable_svg.validate_svg],
                    ),
                ),
                (
                    "icon_svg",
                    models.CharField(
                        blank=True, help_text="<svg> element", max_length=8192
                    ),
                ),
                ("name", models.CharField(max_length=30)),
                (
                    "domain",
                    models.CharField(
                        help_text="Unique url pattern used for parsing",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("tooltip", models.CharField(blank=True, max_length=50)),
                (
                    "is_source",
                    models.BooleanField(
                        default=False, help_text="Source code available at this link?"
                    ),
                ),
                (
                    "host_type",
                    models.CharField(
                        choices=[
                            ("install", "Install"),
                            ("source", "Source"),
                            ("instance", "Instance"),
                        ],
                        default="install",
                        max_length=10,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MessageOfTheDay",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=64, null=True)),
                ("content", models.TextField()),
                ("display", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name_plural": "Messages of the Day",
            },
        ),
        migrations.CreateModel(
            name="RelatedFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(blank=True, upload_to="content/"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="File content description",
                        max_length=140,
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WebApp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=140)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "script",
                    models.FileField(
                        storage=main.storage.OverwriteStorage(), upload_to="webapps/"
                    ),
                ),
                (
                    "content_html",
                    models.TextField(
                        blank=True, help_text="The main body of the webapp in HTML"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("allow_incoming_webmentions", models.BooleanField(default=True)),
                ("allow_outgoing_webmentions", models.BooleanField(default=False)),
                (
                    "primary_color",
                    colorfield.fields.ColorField(blank=True, default="", max_length=18),
                ),
                (
                    "accent_color",
                    colorfield.fields.ColorField(blank=True, default="", max_length=18),
                ),
                (
                    "foreground_color",
                    models.CharField(
                        choices=[("light", "light"), ("dark", "dark")],
                        default="light",
                        help_text="CSS class for content that appears on top of primary color",
                        max_length=10,
                    ),
                ),
                (
                    "accent_foreground_color",
                    models.CharField(
                        choices=[("light", "light"), ("dark", "dark")],
                        default="dark",
                        help_text="CSS class for content that appears on top of accent color",
                        max_length=10,
                    ),
                ),
                (
                    "tweet",
                    models.BooleanField(
                        default=False,
                        help_text='A link to this post will be tweeted by <a href="https://twitter.com/_beatonma">@_beatonma</a> when you save changes.',
                    ),
                ),
                (
                    "tweet_id",
                    models.CharField(
                        blank=True,
                        help_text="ID returned from twitter after a successful post",
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "tagline",
                    models.CharField(
                        blank=True,
                        help_text="Short tagline displayed below title",
                        max_length=140,
                        null=True,
                    ),
                ),
                (
                    "preview_text",
                    models.CharField(
                        blank=True,
                        help_text="Text to display beside links to this post",
                        max_length=255,
                    ),
                ),
                ("slug", models.SlugField(max_length=255, unique=True)),
                (
                    "content_html",
                    models.TextField(
                        blank=True, help_text="The main body of the post in HTML"
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "updated",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Primary date used for sorting",
                    ),
                ),
                (
                    "published",
                    models.BooleanField(default=True, help_text="Publicly visible"),
                ),
                (
                    "push_to_feed",
                    models.BooleanField(
                        default=True,
                        help_text="This item may appear in RSS feeds and front-page lists",
                    ),
                ),
                ("featured", models.BooleanField(default=False)),
                (
                    "html_head",
                    models.TextField(
                        blank=True, help_text="Include extra styles or scripts"
                    ),
                ),
                (
                    "abstract",
                    models.CharField(blank=True, help_text="tl;dr", max_length=1024),
                ),
                (
                    "preview_image",
                    models.FileField(
                        blank=True,
                        help_text="Image shown beside links to this article",
                        upload_to="preview/",
                    ),
                ),
                (
                    "preview_image_css",
                    models.CharField(
                        blank=True,
                        help_text="space-separated CSS class names",
                        max_length=80,
                    ),
                ),
                (
                    "hero_image",
                    models.FileField(
                        blank=True,
                        help_text="Image shown at the top of the article",
                        upload_to="hero/",
                    ),
                ),
                (
                    "hero_aspect_ratio",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "Default"),
                            ("aspect-1-1", "1:1"),
                            ("aspect-2-1", "2:1"),
                            ("aspect-5-4", "5:4"),
                            ("aspect-4-3", "4:3"),
                            ("aspect-16-9", "16:9"),
                            ("aspect-16-10", "16:10"),
                            ("aspect-3-4", "3:4"),
                        ],
                        default="",
                        max_length=20,
                    ),
                ),
                (
                    "hero_html",
                    models.TextField(
                        blank=True,
                        help_text="Replace the hero image area with something else",
                    ),
                ),
                (
                    "hero_css",
                    models.CharField(
                        blank=True,
                        help_text="space-separated CSS class names",
                        max_length=80,
                    ),
                ),
                (
                    "app",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Choose any apps that this article talks about",
                        related_name="article",
                        to="main.App",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                ("abstract_html", models.TextField(blank=True)),
                (
                    "content",
                    models.TextField(
                        blank=True, default="", help_text="Main body of the post"
                    ),
                ),
                (
                    "content_format",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "None"), (1, "Markdown")], default=0
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Blog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("allow_incoming_webmentions", models.BooleanField(default=True)),
                ("allow_outgoing_webmentions", models.BooleanField(default=False)),
                (
                    "primary_color",
                    colorfield.fields.ColorField(blank=True, default="", max_length=18),
                ),
                (
                    "accent_color",
                    colorfield.fields.ColorField(blank=True, default="", max_length=18),
                ),
                (
                    "foreground_color",
                    models.CharField(
                        choices=[("light", "light"), ("dark", "dark")],
                        default="light",
                        help_text="CSS class for content that appears on top of primary color",
                        max_length=10,
                    ),
                ),
                (
                    "accent_foreground_color",
                    models.CharField(
                        choices=[("light", "light"), ("dark", "dark")],
                        default="dark",
                        help_text="CSS class for content that appears on top of accent color",
                        max_length=10,
                    ),
                ),
                (
                    "tweet",
                    models.BooleanField(
                        default=False,
                        help_text='A link to this post will be tweeted by <a href="https://twitter.com/_beatonma">@_beatonma</a> when you save changes.',
                    ),
                ),
                (
                    "tweet_id",
                    models.CharField(
                        blank=True,
                        help_text="ID returned from twitter after a successful post",
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "tagline",
                    models.CharField(
                        blank=True,
                        help_text="Short tagline displayed below title",
                        max_length=140,
                        null=True,
                    ),
                ),
                (
                    "preview_text",
                    models.CharField(
                        blank=True,
                        help_text="Text to display beside links to this post",
                        max_length=255,
                    ),
                ),
                ("slug", models.SlugField(max_length=255, unique=True)),
                (
                    "content_html",
                    models.TextField(
                        blank=True, help_text="The main body of the post in HTML"
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "updated",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Primary date used for sorting",
                    ),
                ),
                (
                    "published",
                    models.BooleanField(default=True, help_text="Publicly visible"),
                ),
                (
                    "push_to_feed",
                    models.BooleanField(
                        default=True,
                        help_text="This item may appear in RSS feeds and front-page lists",
                    ),
                ),
                ("featured", models.BooleanField(default=False)),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True, default="", help_text="Main body of the post"
                    ),
                ),
                (
                    "content_format",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "None"), (1, "Markdown")], default=0
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Changelog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("allow_incoming_webmentions", models.BooleanField(default=True)),
                ("allow_outgoing_webmentions", models.BooleanField(default=False)),
                (
                    "tweet",
                    models.BooleanField(
                        default=False,
                        help_text='A link to this post will be tweeted by <a href="https://twitter.com/_beatonma">@_beatonma</a> when you save changes.',
                    ),
                ),
                (
                    "tweet_id",
                    models.CharField(
                        blank=True,
                        help_text="ID returned from twitter after a successful post",
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "tagline",
                    models.CharField(
                        blank=True,
                        help_text="Short tagline displayed below title",
                        max_length=140,
                        null=True,
                    ),
                ),
                (
                    "preview_text",
                    models.CharField(
                        blank=True,
                        help_text="Text to display beside links to this post",
                        max_length=255,
                    ),
                ),
                ("slug", models.SlugField(max_length=255, unique=True)),
                (
                    "content_html",
                    models.TextField(
                        blank=True, help_text="The main body of the post in HTML"
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "updated",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Primary date used for sorting",
                    ),
                ),
                (
                    "published",
                    models.BooleanField(default=True, help_text="Publicly visible"),
                ),
                (
                    "push_to_feed",
                    models.BooleanField(
                        default=True,
                        help_text="This item may appear in RSS feeds and front-page lists",
                    ),
                ),
                ("featured", models.BooleanField(default=False)),
                (
                    "date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the corresponding update was published",
                    ),
                ),
                ("version_name", models.CharField(max_length=30)),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.app",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True, default="", help_text="Main body of the post"
                    ),
                ),
                (
                    "content_format",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "None"), (1, "Markdown")], default=0
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("allow_incoming_webmentions", models.BooleanField(default=True)),
                ("allow_outgoing_webmentions", models.BooleanField(default=False)),
                (
                    "tweet",
                    models.BooleanField(
                        default=False,
                        help_text='A link to this post will be tweeted by <a href="https://twitter.com/_beatonma">@_beatonma</a> when you save changes.',
                    ),
                ),
                (
                    "tweet_id",
                    models.CharField(
                        blank=True,
                        help_text="ID returned from twitter after a successful post",
                        max_length=30,
                    ),
                ),
                ("content", models.CharField(default="", max_length=280)),
                ("slug", models.SlugField(max_length=7, unique=True)),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "published",
                    models.BooleanField(default=True, help_text="Publicly visible"),
                ),
                (
                    "push_to_feed",
                    models.BooleanField(
                        default=True,
                        help_text="This item may appear in RSS feeds and front-page lists",
                    ),
                ),
                ("featured", models.BooleanField(default=False)),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                ("content_html", models.TextField(blank=True, default="")),
            ],
            options={
                "ordering": ["-created"],
            },
        ),
    ]
