from datetime import timedelta

from common.models import BaseModel
from common.util.time import coerce_tzdatetime
from django.conf import settings
from django.db import models
from django.db.models import QuerySet
from django.utils import timezone


def get_temp_webmention_ttl_seconds() -> int:
    return getattr(
        settings, "WEBMENTIONS_TESTER_TTL_SECONDS", 15 * 60  # default 15 minutes
    )


def _submission_time() -> timezone.datetime:
    return timezone.now()


def _expiration_time() -> timezone.datetime:
    dt = timezone.now() + timedelta(seconds=get_temp_webmention_ttl_seconds())

    return coerce_tzdatetime(dt)


class TemporaryMentionQuerySet(QuerySet):
    def active(self, now=None):
        if now is None:
            now = timezone.now()
        return self.filter(
            submission_time__lt=now,
            expiration_time__gt=now,
        )


class TemporaryMention(BaseModel):
    """A link that may be displayed publicly for a short time. Generated by users of the testing tool."""

    objects = TemporaryMentionQuerySet.as_manager()
    url = models.URLField()
    submission_time = models.DateTimeField(default=_submission_time)
    expiration_time = models.DateTimeField(default=_expiration_time)

    outgoing_status = models.ForeignKey(
        "mentions.OutgoingWebmentionStatus",
        on_delete=models.CASCADE,
        null=True,
        blank=True,
    )

    def is_expired(self, now=None):
        if now is None:
            now = timezone.now()

        return self.expiration_time < now

    def __str__(self):
        return f"{self.url} {self.submission_time} -> (expires:{self.expiration_time})"


def get_active_temporary_mentions(now=None):
    if now is None:
        now = timezone.now()

    return TemporaryMention.objects.filter(
        submission_time__lt=now,
        expiration_time__gt=now,
    )
